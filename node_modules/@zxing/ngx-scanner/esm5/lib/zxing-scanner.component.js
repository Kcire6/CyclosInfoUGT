import { __awaiter, __decorate, __generator, __metadata, __read, __spread } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { ArgumentException, BarcodeFormat, DecodeHintType } from '@zxing/library';
import { BrowserMultiFormatContinuousReader } from './browser-multi-format-continuous-reader';
import * as Éµngcc0 from '@angular/core';

var _c0 = ["preview"];
var ZXingScannerComponent = /** @class */ (function () {
    /**
     * Constructor to build the object and do some DI.
     */
    function ZXingScannerComponent() {
        /**
         * Modify delay between scans (default is 500ms)
         */
        this.timeBetweenScans = 500;
        /**
         * How the preview element shoud be fit inside the :host container.
         */
        this.previewFitMode = 'cover';
        // instance based emitters
        this.autostarted = new EventEmitter();
        this.autostarting = new EventEmitter();
        this.torchCompatible = new EventEmitter();
        this.scanSuccess = new EventEmitter();
        this.scanFailure = new EventEmitter();
        this.scanError = new EventEmitter();
        this.scanComplete = new EventEmitter();
        this.camerasFound = new EventEmitter();
        this.camerasNotFound = new EventEmitter();
        this.permissionResponse = new EventEmitter(true);
        this.hasDevices = new EventEmitter();
        this.deviceChange = new EventEmitter();
        this._device = null;
        this._enabled = true;
        this._hints = new Map();
        this.autofocusEnabled = true;
        this.autostart = true;
        this.formats = [BarcodeFormat.QR_CODE];
        // computed data
        this.hasNavigator = typeof navigator !== 'undefined';
        this.isMediaDevicesSupported = this.hasNavigator && !!navigator.mediaDevices;
    }
    Object.defineProperty(ZXingScannerComponent.prototype, "codeReader", {
        /**
         * Exposes the current code reader, so the user can use it's APIs.
         */
        get: function () {
            return this._codeReader;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZXingScannerComponent.prototype, "device", {
        /**
         * User device acessor.
         */
        get: function () {
            return this._device;
        },
        /**
         * User device input
         */
        set: function (device) {
            if (!device && device !== null) {
                throw new ArgumentException('The `device` must be a valid MediaDeviceInfo or null.');
            }
            if (this.isCurrentDevice(device)) {
                console.warn('Setting the same device is not allowed.');
                return;
            }
            if (this.isAutostarting) {
                // do not allow setting devices during auto-start, since it will set one and emit it.
                console.warn('Avoid setting a device during auto-start.');
                return;
            }
            if (!this.hasPermission) {
                console.warn('Permissions not set yet, waiting for them to be set to apply device change.');
                // this.permissionResponse
                //   .pipe(
                //     take(1),
                //     tap(() => console.log(`Permissions set, applying device change${device ? ` (${device.deviceId})` : ''}.`))
                //   )
                //   .subscribe(() => this.device = device);
                // return;
            }
            // in order to change the device the codeReader gotta be reseted
            this._reset();
            this._device = device;
            // if enabled, starts scanning
            if (this._enabled && device !== null) {
                this.scanFromDevice(device.deviceId);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZXingScannerComponent.prototype, "formats", {
        /**
         * Returns all the registered formats.
         */
        get: function () {
            return this.hints.get(DecodeHintType.POSSIBLE_FORMATS);
        },
        /**
         * Registers formats the scanner should support.
         *
         * @param input BarcodeFormat or case-insensitive string array.
         */
        set: function (input) {
            var _this = this;
            if (typeof input === 'string') {
                throw new Error('Invalid formats, make sure the [formats] input is a binding.');
            }
            // formats may be set from html template as BarcodeFormat or string array
            var formats = input.map(function (f) { return _this.getBarcodeFormatOrFail(f); });
            var hints = this.hints;
            // updates the hints
            hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);
            this.hints = hints;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZXingScannerComponent.prototype, "hints", {
        /**
         * Returns all the registered hints.
         */
        get: function () {
            return this._hints;
        },
        /**
         * Does what it takes to set the hints.
         */
        set: function (hints) {
            this._hints = hints;
            // @note avoid restarting the code reader when possible
            // new instance with new hints.
            this.restart();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZXingScannerComponent.prototype, "isAutostarting", {
        /**
         *
         */
        get: function () {
            return this._isAutostarting;
        },
        /**
         *
         */
        set: function (state) {
            this._isAutostarting = state;
            this.autostarting.next(state);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZXingScannerComponent.prototype, "torch", {
        /**
         * Can turn on/off the device flashlight.
         */
        set: function (on) {
            this.getCodeReader().setTorch(on);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZXingScannerComponent.prototype, "enable", {
        /**
         * Starts and Stops the scanning.
         */
        set: function (enabled) {
            this._enabled = Boolean(enabled);
            if (!this._enabled) {
                this.reset();
            }
            else if (this.device) {
                this.scanFromDevice(this.device.deviceId);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZXingScannerComponent.prototype, "enabled", {
        /**
         * Tells if the scanner is enabled or not.
         */
        get: function () {
            return this._enabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZXingScannerComponent.prototype, "tryHarder", {
        /**
         * If is `tryHarder` enabled.
         */
        get: function () {
            return this.hints.get(DecodeHintType.TRY_HARDER);
        },
        /**
         * Enable/disable tryHarder hint.
         */
        set: function (enable) {
            var hints = this.hints;
            if (enable) {
                hints.set(DecodeHintType.TRY_HARDER, true);
            }
            else {
                hints.delete(DecodeHintType.TRY_HARDER);
            }
            this.hints = hints;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets and registers all cammeras.
     */
    ZXingScannerComponent.prototype.askForPermission = function () {
        return __awaiter(this, void 0, void 0, function () {
            var stream, permission, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.hasNavigator) {
                            console.error('@zxing/ngx-scanner', 'Can\'t ask permission, navigator is not present.');
                            this.setPermission(null);
                            return [2 /*return*/, this.hasPermission];
                        }
                        if (!this.isMediaDevicesSupported) {
                            console.error('@zxing/ngx-scanner', 'Can\'t get user media, this is not supported.');
                            this.setPermission(null);
                            return [2 /*return*/, this.hasPermission];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.getAnyVideoDevice()];
                    case 2:
                        // Will try to ask for permission
                        stream = _a.sent();
                        permission = !!stream;
                        return [3 /*break*/, 5];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, this.handlePermissionException(err_1)];
                    case 4:
                        this.terminateStream(stream);
                        return [7 /*endfinally*/];
                    case 5:
                        this.setPermission(permission);
                        // Returns the permission
                        return [2 /*return*/, permission];
                }
            });
        });
    };
    /**
     *
     */
    ZXingScannerComponent.prototype.getAnyVideoDevice = function () {
        return navigator.mediaDevices.getUserMedia({ video: true });
    };
    /**
     * Terminates a stream and it's tracks.
     */
    ZXingScannerComponent.prototype.terminateStream = function (stream) {
        if (stream) {
            stream.getTracks().forEach(function (t) { return t.stop(); });
        }
        stream = undefined;
    };
    /**
     * Initializes the component without starting the scanner.
     */
    ZXingScannerComponent.prototype.initAutostartOff = function () {
        // do not ask for permission when autostart is off
        this.isAutostarting = null;
        // just update devices information
        this.updateVideoInputDevices();
    };
    /**
     * Initializes the component and starts the scanner.
     * Permissions are asked to accomplish that.
     */
    ZXingScannerComponent.prototype.initAutostartOn = function () {
        return __awaiter(this, void 0, void 0, function () {
            var hasPermission, e_1, devices;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.isAutostarting = true;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.askForPermission()];
                    case 2:
                        // Asks for permission before enumerating devices so it can get all the device's info
                        hasPermission = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        console.error('Exception occurred while asking for permission:', e_1);
                        return [2 /*return*/];
                    case 4:
                        if (!hasPermission) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.updateVideoInputDevices()];
                    case 5:
                        devices = _a.sent();
                        this.autostartScanner(__spread(devices));
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Checks if the given device is the current defined one.
     */
    ZXingScannerComponent.prototype.isCurrentDevice = function (device) {
        return this.device && device && device.deviceId === this.device.deviceId;
    };
    /**
     * Executed after the view initialization.
     */
    ZXingScannerComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        // makes torch availability information available to user
        this.getCodeReader().isTorchAvailable.subscribe(function (x) { return _this.torchCompatible.emit(x); });
        if (!this.autostart) {
            console.warn('New feature \'autostart\' disabled, be careful. Permissions and devices recovery has to be run manually.');
            // does the necessary configuration without autostarting
            this.initAutostartOff();
            return;
        }
        // configurates the component and starts the scanner
        this.initAutostartOn();
    };
    /**
     * Executes some actions before destroy the component.
     */
    ZXingScannerComponent.prototype.ngOnDestroy = function () {
        this.reset();
    };
    /**
     * Stops old `codeReader` and starts scanning in a new one.
     */
    ZXingScannerComponent.prototype.restart = function () {
        var prevDevice = this._reset();
        if (!prevDevice) {
            return;
        }
        // @note apenas necessario por enquanto causa da Torch
        this._codeReader = undefined;
        this.device = prevDevice;
    };
    /**
     * Discovers and updates known video input devices.
     */
    ZXingScannerComponent.prototype.updateVideoInputDevices = function () {
        return __awaiter(this, void 0, void 0, function () {
            var devices, hasDevices;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCodeReader().listVideoInputDevices()];
                    case 1:
                        devices = (_a.sent()) || [];
                        hasDevices = devices && devices.length > 0;
                        // stores discovered devices and updates information
                        this.hasDevices.next(hasDevices);
                        this.camerasFound.next(__spread(devices));
                        if (!hasDevices) {
                            this.camerasNotFound.next();
                        }
                        return [2 /*return*/, devices];
                }
            });
        });
    };
    /**
     * Starts the scanner with the back camera otherwise take the last
     * available device.
     */
    ZXingScannerComponent.prototype.autostartScanner = function (devices) {
        var matcher = function (_a) {
            var label = _a.label;
            return /back|trÃ¡s|rear|traseira|environment|ambiente/gi.test(label);
        };
        // select the rear camera by default, otherwise take the last camera.
        var device = devices.find(matcher) || devices.pop();
        if (!device) {
            throw new Error('Impossible to autostart, no input devices available.');
        }
        this.device = device;
        // @note when listening to this change, callback code will sometimes run before the previous line.
        this.deviceChange.emit(device);
        this.isAutostarting = false;
        this.autostarted.next();
    };
    /**
     * Dispatches the scan success event.
     *
     * @param result the scan result.
     */
    ZXingScannerComponent.prototype.dispatchScanSuccess = function (result) {
        this.scanSuccess.next(result.getText());
    };
    /**
     * Dispatches the scan failure event.
     */
    ZXingScannerComponent.prototype.dispatchScanFailure = function (reason) {
        this.scanFailure.next(reason);
    };
    /**
     * Dispatches the scan error event.
     *
     * @param error the error thing.
     */
    ZXingScannerComponent.prototype.dispatchScanError = function (error) {
        this.scanError.next(error);
    };
    /**
     * Dispatches the scan event.
     *
     * @param result the scan result.
     */
    ZXingScannerComponent.prototype.dispatchScanComplete = function (result) {
        this.scanComplete.next(result);
    };
    /**
     * Returns the filtered permission.
     */
    ZXingScannerComponent.prototype.handlePermissionException = function (err) {
        // failed to grant permission to video input
        console.error('@zxing/ngx-scanner', 'Error when asking for permission.', err);
        var permission;
        switch (err.name) {
            // usually caused by not secure origins
            case 'NotSupportedError':
                console.warn('@zxing/ngx-scanner', err.message);
                // could not claim
                permission = null;
                // can't check devices
                this.hasDevices.next(null);
                break;
            // user denied permission
            case 'NotAllowedError':
                console.warn('@zxing/ngx-scanner', err.message);
                // claimed and denied permission
                permission = false;
                // this means that input devices exists
                this.hasDevices.next(true);
                break;
            // the device has no attached input devices
            case 'NotFoundError':
                console.warn('@zxing/ngx-scanner', err.message);
                // no permissions claimed
                permission = null;
                // because there was no devices
                this.hasDevices.next(false);
                // tells the listener about the error
                this.camerasNotFound.next(err);
                break;
            case 'NotReadableError':
                console.warn('@zxing/ngx-scanner', 'Couldn\'t read the device(s)\'s stream, it\'s probably in use by another app.');
                // no permissions claimed
                permission = null;
                // there are devices, which I couldn't use
                this.hasDevices.next(false);
                // tells the listener about the error
                this.camerasNotFound.next(err);
                break;
            default:
                console.warn('@zxing/ngx-scanner', 'I was not able to define if I have permissions for camera or not.', err);
                // unknown
                permission = null;
                // this.hasDevices.next(undefined;
                break;
        }
        this.setPermission(permission);
        // tells the listener about the error
        this.permissionResponse.error(err);
        return permission;
    };
    /**
     * Returns a valid BarcodeFormat or fails.
     */
    ZXingScannerComponent.prototype.getBarcodeFormatOrFail = function (format) {
        return typeof format === 'string'
            ? BarcodeFormat[format.trim().toUpperCase()]
            : format;
    };
    /**
     * Retorna um code reader, cria um se nenhume existe.
     */
    ZXingScannerComponent.prototype.getCodeReader = function () {
        if (!this._codeReader) {
            this._codeReader = new BrowserMultiFormatContinuousReader(this.hints, this.timeBetweenScans);
        }
        return this._codeReader;
    };
    /**
     * Starts the continuous scanning for the given device.
     *
     * @param deviceId The deviceId from the device.
     */
    ZXingScannerComponent.prototype.scanFromDevice = function (deviceId) {
        var _this = this;
        var videoElement = this.previewElemRef.nativeElement;
        var codeReader = this.getCodeReader();
        var decodingStream = codeReader.continuousDecodeFromInputVideoDevice(deviceId, videoElement);
        if (!decodingStream) {
            throw new Error('Undefined decoding stream, aborting.');
        }
        var next = function (x) { return _this._onDecodeResult(x.result, x.error); };
        var error = function (err) { return _this._onDecodeError(err); };
        var complete = function () { _this.reset(); console.log('completed'); };
        decodingStream.subscribe(next, error, complete);
    };
    /**
     * Handles decode errors.
     */
    ZXingScannerComponent.prototype._onDecodeError = function (err) {
        this.dispatchScanError(err);
        this.reset();
    };
    /**
     * Handles decode results.
     */
    ZXingScannerComponent.prototype._onDecodeResult = function (result, error) {
        if (result) {
            this.dispatchScanSuccess(result);
        }
        else {
            this.dispatchScanFailure(error);
        }
        this.dispatchScanComplete(result);
    };
    /**
     * Stops the code reader and returns the previous selected device.
     */
    ZXingScannerComponent.prototype._reset = function () {
        if (!this._codeReader) {
            return;
        }
        var device = this.device;
        // do not set this.device inside this method, it would create a recursive loop
        this._device = null;
        this._codeReader.reset();
        return device;
    };
    /**
     * Resets the scanner and emits device change.
     */
    ZXingScannerComponent.prototype.reset = function () {
        this._reset();
        this.deviceChange.emit(null);
    };
    /**
     * Sets the permission value and emmits the event.
     */
    ZXingScannerComponent.prototype.setPermission = function (hasPermission) {
        this.hasPermission = hasPermission;
        this.permissionResponse.next(hasPermission);
    };
    __decorate([
        ViewChild('preview', { static: true }),
        __metadata("design:type", ElementRef)
    ], ZXingScannerComponent.prototype, "previewElemRef", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ZXingScannerComponent.prototype, "autofocusEnabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ZXingScannerComponent.prototype, "timeBetweenScans", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ZXingScannerComponent.prototype, "autostarted", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ZXingScannerComponent.prototype, "autostarting", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ZXingScannerComponent.prototype, "autostart", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ZXingScannerComponent.prototype, "previewFitMode", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ZXingScannerComponent.prototype, "torchCompatible", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ZXingScannerComponent.prototype, "scanSuccess", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ZXingScannerComponent.prototype, "scanFailure", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ZXingScannerComponent.prototype, "scanError", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ZXingScannerComponent.prototype, "scanComplete", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ZXingScannerComponent.prototype, "camerasFound", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ZXingScannerComponent.prototype, "camerasNotFound", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ZXingScannerComponent.prototype, "permissionResponse", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ZXingScannerComponent.prototype, "hasDevices", void 0);
    __decorate([
        Input(),
        __metadata("design:type", MediaDeviceInfo),
        __metadata("design:paramtypes", [MediaDeviceInfo])
    ], ZXingScannerComponent.prototype, "device", null);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ZXingScannerComponent.prototype, "deviceChange", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], ZXingScannerComponent.prototype, "formats", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], ZXingScannerComponent.prototype, "torch", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], ZXingScannerComponent.prototype, "enable", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], ZXingScannerComponent.prototype, "tryHarder", null);
    ZXingScannerComponent = __decorate([ __metadata("design:paramtypes", [])
    ], ZXingScannerComponent);
ZXingScannerComponent.Éµfac = function ZXingScannerComponent_Factory(t) { return new (t || ZXingScannerComponent)(); };
ZXingScannerComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({ type: ZXingScannerComponent, selectors: [["zxing-scanner"]], viewQuery: function ZXingScannerComponent_Query(rf, ctx) { if (rf & 1) {
        Éµngcc0.ÉµÉµstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.previewElemRef = _t.first);
    } }, inputs: { timeBetweenScans: "timeBetweenScans", previewFitMode: "previewFitMode", autofocusEnabled: "autofocusEnabled", autostart: "autostart", formats: "formats", device: "device", torch: "torch", enable: "enable", tryHarder: "tryHarder" }, outputs: { autostarted: "autostarted", autostarting: "autostarting", torchCompatible: "torchCompatible", scanSuccess: "scanSuccess", scanFailure: "scanFailure", scanError: "scanError", scanComplete: "scanComplete", camerasFound: "camerasFound", camerasNotFound: "camerasNotFound", permissionResponse: "permissionResponse", hasDevices: "hasDevices", deviceChange: "deviceChange" }, decls: 6, vars: 2, consts: [["preview", ""]], template: function ZXingScannerComponent_Template(rf, ctx) { if (rf & 1) {
        Éµngcc0.ÉµÉµelementStart(0, "video", null, 0);
        Éµngcc0.ÉµÉµelementStart(2, "p");
        Éµngcc0.ÉµÉµtext(3, " Your browser does not support this feature, please try to upgrade it. ");
        Éµngcc0.ÉµÉµelementEnd();
        Éµngcc0.ÉµÉµelementStart(4, "p");
        Éµngcc0.ÉµÉµtext(5, " Seu navegador n\u00E3o suporta este recurso, por favor tente atualiz\u00E1-lo. ");
        Éµngcc0.ÉµÉµelementEnd();
        Éµngcc0.ÉµÉµelementEnd();
    } if (rf & 2) {
        Éµngcc0.ÉµÉµstyleProp("object-fit", ctx.previewFitMode);
    } }, styles: ["[_nghost-%COMP%]{display:block}video[_ngcontent-%COMP%]{width:100%;height:auto;-o-object-fit:contain;object-fit:contain}"], changeDetection: 0 });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(ZXingScannerComponent, [{
        type: Component,
        args: [{
                selector: 'zxing-scanner',
                template: "<video #preview [style.object-fit]=\"previewFitMode\">\r\n  <p>\r\n    Your browser does not support this feature, please try to upgrade it.\r\n  </p>\r\n  <p>\r\n    Seu navegador n\u00E3o suporta este recurso, por favor tente atualiz\u00E1-lo.\r\n  </p>\r\n</video>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:block}video{width:100%;height:auto;-o-object-fit:contain;object-fit:contain}"]
            }]
    }], function () { return []; }, { timeBetweenScans: [{
            type: Input
        }], previewFitMode: [{
            type: Input
        }], autostarted: [{
            type: Output
        }], autostarting: [{
            type: Output
        }], torchCompatible: [{
            type: Output
        }], scanSuccess: [{
            type: Output
        }], scanFailure: [{
            type: Output
        }], scanError: [{
            type: Output
        }], scanComplete: [{
            type: Output
        }], camerasFound: [{
            type: Output
        }], camerasNotFound: [{
            type: Output
        }], permissionResponse: [{
            type: Output
        }], hasDevices: [{
            type: Output
        }], deviceChange: [{
            type: Output
        }], autofocusEnabled: [{
            type: Input
        }], autostart: [{
            type: Input
        }], formats: [{
            type: Input
        }], device: [{
            type: Input
        }], torch: [{
            type: Input
        }], enable: [{
            type: Input
        }], tryHarder: [{
            type: Input
        }], previewElemRef: [{
            type: ViewChild,
            args: ['preview', { static: true }]
        }] }); })();
    return ZXingScannerComponent;
}());
export { ZXingScannerComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,