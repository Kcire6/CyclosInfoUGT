{"version":3,"file":"zxing-ngx-scanner.js","sources":["ng:/@zxing/ngx-scanner/lib/browser-multi-format-continuous-reader.ts","ng:/@zxing/ngx-scanner/lib/zxing-scanner.component.ts","ng:/@zxing/ngx-scanner/lib/zxing-scanner.module.ts","ng:/@zxing/ngx-scanner/public_api.ts","ng:/@zxing/ngx-scanner/zxing-ngx-scanner.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"./image-capture.d.ts\" />\r\n\r\nimport { BrowserMultiFormatReader, ChecksumException, FormatException, NotFoundException, Result } from '@zxing/library';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { ResultAndError } from './ResultAndError';\r\n\r\n/**\r\n * Based on zxing-typescript BrowserCodeReader\r\n */\r\nexport class BrowserMultiFormatContinuousReader extends BrowserMultiFormatReader {\r\n\r\n  /**\r\n   * Exposes _tochAvailable .\r\n   */\r\n  public get isTorchAvailable(): Observable<boolean> {\r\n    return this._isTorchAvailable.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Says if there's a torch available for the current device.\r\n   */\r\n  private _isTorchAvailable = new BehaviorSubject<boolean>(undefined);\r\n\r\n  /**\r\n   * The device id of the current media device.\r\n   */\r\n  private deviceId: string;\r\n\r\n  /**\r\n   * If there's some scan stream open, it shal be here.\r\n   */\r\n  private scanStream: BehaviorSubject<ResultAndError>;\r\n\r\n  /**\r\n   * Starts the decoding from the current or a new video element.\r\n   *\r\n   * @param callbackFn The callback to be executed after every scan attempt\r\n   * @param deviceId The device's to be used Id\r\n   * @param videoSource A new video element\r\n   */\r\n  public continuousDecodeFromInputVideoDevice(\r\n    deviceId?: string,\r\n    videoSource?: HTMLVideoElement\r\n  ): Observable<ResultAndError> {\r\n\r\n    this.reset();\r\n\r\n    // Keeps the deviceId between scanner resets.\r\n    if (typeof deviceId !== 'undefined') {\r\n      this.deviceId = deviceId;\r\n    }\r\n\r\n    if (typeof navigator === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    const scan$ = new BehaviorSubject<ResultAndError>({});\r\n\r\n    try {\r\n      // this.decodeFromInputVideoDeviceContinuously(deviceId, videoSource, (result, error) => scan$.next({ result, error }));\r\n      this.getStreamForDevice({ deviceId })\r\n        .then(stream => this.attachStreamToVideoAndCheckTorch(stream, videoSource))\r\n        .then(videoElement => this.decodeOnSubject(scan$, videoElement, this.timeBetweenScansMillis));\r\n    } catch (e) {\r\n      scan$.error(e);\r\n    }\r\n\r\n    this._setScanStream(scan$);\r\n\r\n    // @todo Find a way to emit a complete event on the scan stream once it's finished.\r\n\r\n    return scan$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Gets the media stream for certain device.\r\n   * Falls back to any available device if no `deviceId` is defined.\r\n   */\r\n  public async getStreamForDevice({ deviceId }: Partial<MediaDeviceInfo>): Promise<MediaStream> {\r\n    const constraints = this.getUserMediaConstraints(deviceId);\r\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n    return stream;\r\n  }\r\n\r\n  /**\r\n   * Creates media steram constraints for certain `deviceId`.\r\n   * Falls back to any environment available device if no `deviceId` is defined.\r\n   */\r\n  public getUserMediaConstraints(deviceId: string): MediaStreamConstraints {\r\n\r\n    const video = typeof deviceId === 'undefined'\r\n      ? { facingMode: { exact: 'environment' } }\r\n      : { deviceId: { exact: deviceId } };\r\n\r\n    const constraints: MediaStreamConstraints = { video };\r\n\r\n    return constraints;\r\n  }\r\n\r\n  /**\r\n   * Enables and disables the device torch.\r\n   */\r\n  public setTorch(on: boolean): void {\r\n\r\n    if (!this._isTorchAvailable.value) {\r\n      // compatibility not checked yet\r\n      return;\r\n    }\r\n\r\n    const tracks = this.getVideoTracks(this.stream);\r\n\r\n    if (on) {\r\n      this.applyTorchOnTracks(tracks, true);\r\n    } else {\r\n      this.applyTorchOnTracks(tracks, false);\r\n      // @todo check possibility to disable torch without restart\r\n      this.restart();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the torch compatibility state and attachs the stream to the preview element.\r\n   */\r\n  private attachStreamToVideoAndCheckTorch(stream: MediaStream, videoSource: HTMLVideoElement): Promise<HTMLVideoElement> {\r\n    this.updateTorchCompatibility(stream);\r\n    return this.attachStreamToVideo(stream, videoSource);\r\n  }\r\n\r\n  /**\r\n   * Checks if the stream supports torch control.\r\n   *\r\n   * @param stream The media stream used to check.\r\n   */\r\n  private async updateTorchCompatibility(stream: MediaStream): Promise<void> {\r\n\r\n    const tracks = this.getVideoTracks(stream);\r\n\r\n    for (const track of tracks) {\r\n      if (await this.isTorchCompatible(track)) {\r\n        this._isTorchAvailable.next(true);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param stream The video stream where the tracks gonna be extracted from.\r\n   */\r\n  private getVideoTracks(stream: MediaStream) {\r\n    let tracks = [];\r\n    try {\r\n      tracks = stream.getVideoTracks();\r\n    }\r\n    finally {\r\n      return tracks || [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param track The media stream track that will be checked for compatibility.\r\n   */\r\n  private async isTorchCompatible(track: MediaStreamTrack) {\r\n\r\n    let compatible = false;\r\n\r\n    try {\r\n      const imageCapture = new ImageCapture(track);\r\n      const capabilities = await imageCapture.getPhotoCapabilities();\r\n      compatible = !!capabilities['torch'] || ('fillLightMode' in capabilities && capabilities.fillLightMode.length !== 0);\r\n    }\r\n    finally {\r\n      return compatible;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply the torch setting in all received tracks.\r\n   */\r\n  private applyTorchOnTracks(tracks: MediaStreamTrack[], state: boolean) {\r\n    tracks.forEach(track => track.applyConstraints({\r\n      advanced: [<any>{ torch: state, fillLightMode: state ? 'torch' : 'none' }]\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Correctly sets a new scanStream value.\r\n   */\r\n  private _setScanStream(scan$: BehaviorSubject<ResultAndError>): void {\r\n    // cleans old stream\r\n    this._cleanScanStream();\r\n    // sets new stream\r\n    this.scanStream = scan$;\r\n  }\r\n\r\n  /**\r\n   * Cleans any old scan stream value.\r\n   */\r\n  private _cleanScanStream(): void {\r\n\r\n    if (this.scanStream && !this.scanStream.isStopped) {\r\n      this.scanStream.complete();\r\n    }\r\n\r\n    this.scanStream = null;\r\n  }\r\n\r\n  /**\r\n   * Decodes values in a stream with delays between scans.\r\n   *\r\n   * @param scan$ The subject to receive the values.\r\n   * @param videoElement The video element the decode will be applied.\r\n   * @param delay The delay between decode results.\r\n   */\r\n  private decodeOnSubject(scan$: BehaviorSubject<ResultAndError>, videoElement: HTMLVideoElement, delay: number): void {\r\n\r\n    // stops loop\r\n    if (scan$.isStopped) {\r\n      return;\r\n    }\r\n\r\n    let result: Result;\r\n\r\n    try {\r\n      result = this.decode(videoElement);\r\n      scan$.next({ result });\r\n    } catch (error) {\r\n      // stream cannot stop on fails.\r\n      if (\r\n        !error ||\r\n        // scan Failure - found nothing, no error\r\n        error instanceof NotFoundException ||\r\n        // scan Error - found the QR but got error on decoding\r\n        error instanceof ChecksumException ||\r\n        error instanceof FormatException\r\n      ) {\r\n        scan$.next({ error });\r\n      } else {\r\n        scan$.error(error);\r\n      }\r\n    } finally {\r\n      const timeout = !result ? 0 : delay;\r\n      setTimeout(() => this.decodeOnSubject(scan$, videoElement, delay), timeout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restarts the scanner.\r\n   */\r\n  private restart(): Observable<ResultAndError> {\r\n    // reset\r\n    // start\r\n    return this.continuousDecodeFromInputVideoDevice(this.deviceId, this.videoElement);\r\n  }\r\n\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\n\r\nimport {\r\n  ArgumentException,\r\n  BarcodeFormat,\r\n  DecodeHintType,\r\n  Exception,\r\n  Result\r\n} from '@zxing/library';\r\n\r\nimport { BrowserMultiFormatContinuousReader } from './browser-multi-format-continuous-reader';\r\nimport { ResultAndError } from './ResultAndError';\r\n\r\n@Component({\r\n  selector: 'zxing-scanner',\r\n  templateUrl: './zxing-scanner.component.html',\r\n  styleUrls: ['./zxing-scanner.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ZXingScannerComponent implements AfterViewInit, OnDestroy {\r\n\r\n  /**\r\n   * Supported Hints map.\r\n   */\r\n  private _hints: Map<DecodeHintType, any> | null;\r\n\r\n  /**\r\n   * The ZXing code reader.\r\n   */\r\n  private _codeReader: BrowserMultiFormatContinuousReader;\r\n\r\n  /**\r\n   * The device that should be used to scan things.\r\n   */\r\n  private _device: MediaDeviceInfo;\r\n\r\n  /**\r\n   * The device that should be used to scan things.\r\n   */\r\n  private _enabled: boolean;\r\n\r\n  /**\r\n   *\r\n   */\r\n  private _isAutostarting: boolean;\r\n\r\n  /**\r\n   * Has `navigator` access.\r\n   */\r\n  private hasNavigator: boolean;\r\n\r\n  /**\r\n   * Says if some native API is supported.\r\n   */\r\n  private isMediaDevicesSupported: boolean;\r\n\r\n  /**\r\n   * If the user-agent allowed the use of the camera or not.\r\n   */\r\n  private hasPermission: boolean | null;\r\n\r\n  /**\r\n   * Reference to the preview element, should be the `video` tag.\r\n   */\r\n  @ViewChild('preview', { static: true })\r\n  previewElemRef: ElementRef<HTMLVideoElement>;\r\n\r\n  /**\r\n   * Enable or disable autofocus of the camera (might have an impact on performance)\r\n   */\r\n  @Input()\r\n  autofocusEnabled: boolean;\r\n\r\n  /**\r\n   * Modify delay between scans (default is 500ms)\r\n   */\r\n  @Input()\r\n  timeBetweenScans = 500;\r\n\r\n  /**\r\n   * Emits when and if the scanner is autostarted.\r\n   */\r\n  @Output()\r\n  autostarted: EventEmitter<void>;\r\n\r\n  /**\r\n   * True during autostart and false after. It will be null if won't autostart at all.\r\n   */\r\n  @Output()\r\n  autostarting: EventEmitter<boolean | null>;\r\n\r\n  /**\r\n   * If the scanner should autostart with the first available device.\r\n   */\r\n  @Input()\r\n  autostart: boolean;\r\n\r\n  /**\r\n   * How the preview element shoud be fit inside the :host container.\r\n   */\r\n  @Input()\r\n  previewFitMode: 'fill' | 'contain' | 'cover' | 'scale-down' | 'none' = 'cover';\r\n\r\n  /**\r\n   * Emitts events when the torch compatibility is changed.\r\n   */\r\n  @Output()\r\n  torchCompatible: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * Emitts events when a scan is successful performed, will inject the string value of the QR-code to the callback.\r\n   */\r\n  @Output()\r\n  scanSuccess: EventEmitter<string>;\r\n\r\n  /**\r\n   * Emitts events when a scan fails without errors, usefull to know how much scan tries where made.\r\n   */\r\n  @Output()\r\n  scanFailure: EventEmitter<Exception | undefined>;\r\n\r\n  /**\r\n   * Emitts events when a scan throws some error, will inject the error to the callback.\r\n   */\r\n  @Output()\r\n  scanError: EventEmitter<Error>;\r\n\r\n  /**\r\n   * Emitts events when a scan is performed, will inject the Result value of the QR-code scan (if available) to the callback.\r\n   */\r\n  @Output()\r\n  scanComplete: EventEmitter<Result>;\r\n\r\n  /**\r\n   * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\r\n   */\r\n  @Output()\r\n  camerasFound: EventEmitter<MediaDeviceInfo[]>;\r\n\r\n  /**\r\n   * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\r\n   */\r\n  @Output()\r\n  camerasNotFound: EventEmitter<any>;\r\n\r\n  /**\r\n   * Emitts events when the users answers for permission.\r\n   */\r\n  @Output()\r\n  permissionResponse: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * Emitts events when has devices status is update.\r\n   */\r\n  @Output()\r\n  hasDevices: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * Exposes the current code reader, so the user can use it's APIs.\r\n   */\r\n  get codeReader(): BrowserMultiFormatContinuousReader {\r\n    return this._codeReader;\r\n  }\r\n\r\n  /**\r\n   * User device input\r\n   */\r\n  @Input()\r\n  set device(device: MediaDeviceInfo | null) {\r\n\r\n    if (!device && device !== null) {\r\n      throw new ArgumentException('The `device` must be a valid MediaDeviceInfo or null.');\r\n    }\r\n\r\n    if (this.isCurrentDevice(device)) {\r\n      console.warn('Setting the same device is not allowed.');\r\n      return;\r\n    }\r\n\r\n    if (this.isAutostarting) {\r\n      // do not allow setting devices during auto-start, since it will set one and emit it.\r\n      console.warn('Avoid setting a device during auto-start.');\r\n      return;\r\n    }\r\n\r\n    if (!this.hasPermission) {\r\n      console.warn('Permissions not set yet, waiting for them to be set to apply device change.');\r\n      // this.permissionResponse\r\n      //   .pipe(\r\n      //     take(1),\r\n      //     tap(() => console.log(`Permissions set, applying device change${device ? ` (${device.deviceId})` : ''}.`))\r\n      //   )\r\n      //   .subscribe(() => this.device = device);\r\n      // return;\r\n    }\r\n\r\n    // in order to change the device the codeReader gotta be reseted\r\n    this._reset();\r\n\r\n    this._device = device;\r\n\r\n    // if enabled, starts scanning\r\n    if (this._enabled && device !== null) {\r\n      this.scanFromDevice(device.deviceId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emits when the current device is changed.\r\n   */\r\n  @Output()\r\n  deviceChange: EventEmitter<MediaDeviceInfo>;\r\n\r\n  /**\r\n   * User device acessor.\r\n   */\r\n  get device() {\r\n    return this._device;\r\n  }\r\n\r\n  /**\r\n   * Returns all the registered formats.\r\n   */\r\n  get formats(): BarcodeFormat[] {\r\n    return this.hints.get(DecodeHintType.POSSIBLE_FORMATS);\r\n  }\r\n\r\n  /**\r\n   * Registers formats the scanner should support.\r\n   *\r\n   * @param input BarcodeFormat or case-insensitive string array.\r\n   */\r\n  @Input()\r\n  set formats(input: BarcodeFormat[]) {\r\n\r\n    if (typeof input === 'string') {\r\n      throw new Error('Invalid formats, make sure the [formats] input is a binding.');\r\n    }\r\n\r\n    // formats may be set from html template as BarcodeFormat or string array\r\n    const formats = input.map(f => this.getBarcodeFormatOrFail(f));\r\n\r\n    const hints = this.hints;\r\n\r\n    // updates the hints\r\n    hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\r\n\r\n    this.hints = hints;\r\n  }\r\n\r\n  /**\r\n   * Returns all the registered hints.\r\n   */\r\n  get hints() {\r\n    return this._hints;\r\n  }\r\n\r\n  /**\r\n   * Does what it takes to set the hints.\r\n   */\r\n  set hints(hints: Map<DecodeHintType, any>) {\r\n\r\n    this._hints = hints;\r\n\r\n    // @note avoid restarting the code reader when possible\r\n\r\n    // new instance with new hints.\r\n    this.restart();\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  set isAutostarting(state: boolean | null) {\r\n    this._isAutostarting = state;\r\n    this.autostarting.next(state);\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  get isAutostarting(): boolean | null {\r\n    return this._isAutostarting;\r\n  }\r\n\r\n  /**\r\n   * Can turn on/off the device flashlight.\r\n   */\r\n  @Input()\r\n  set torch(on: boolean) {\r\n    this.getCodeReader().setTorch(on);\r\n  }\r\n\r\n  /**\r\n   * Starts and Stops the scanning.\r\n   */\r\n  @Input()\r\n  set enable(enabled: boolean) {\r\n\r\n    this._enabled = Boolean(enabled);\r\n\r\n    if (!this._enabled) {\r\n      this.reset();\r\n    } else if (this.device) {\r\n      this.scanFromDevice(this.device.deviceId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tells if the scanner is enabled or not.\r\n   */\r\n  get enabled(): boolean {\r\n    return this._enabled;\r\n  }\r\n\r\n  /**\r\n   * If is `tryHarder` enabled.\r\n   */\r\n  get tryHarder(): boolean {\r\n    return this.hints.get(DecodeHintType.TRY_HARDER);\r\n  }\r\n\r\n  /**\r\n   * Enable/disable tryHarder hint.\r\n   */\r\n  @Input()\r\n  set tryHarder(enable: boolean) {\r\n\r\n    const hints = this.hints;\r\n\r\n    if (enable) {\r\n      hints.set(DecodeHintType.TRY_HARDER, true);\r\n    } else {\r\n      hints.delete(DecodeHintType.TRY_HARDER);\r\n    }\r\n\r\n    this.hints = hints;\r\n  }\r\n\r\n  /**\r\n   * Constructor to build the object and do some DI.\r\n   */\r\n  constructor() {\r\n    // instance based emitters\r\n    this.autostarted = new EventEmitter();\r\n    this.autostarting = new EventEmitter();\r\n    this.torchCompatible = new EventEmitter();\r\n    this.scanSuccess = new EventEmitter();\r\n    this.scanFailure = new EventEmitter();\r\n    this.scanError = new EventEmitter();\r\n    this.scanComplete = new EventEmitter();\r\n    this.camerasFound = new EventEmitter();\r\n    this.camerasNotFound = new EventEmitter();\r\n    this.permissionResponse = new EventEmitter(true);\r\n    this.hasDevices = new EventEmitter();\r\n    this.deviceChange = new EventEmitter();\r\n\r\n    this._device = null;\r\n    this._enabled = true;\r\n    this._hints = new Map<DecodeHintType, any>();\r\n    this.autofocusEnabled = true;\r\n    this.autostart = true;\r\n    this.formats = [BarcodeFormat.QR_CODE];\r\n\r\n    // computed data\r\n    this.hasNavigator = typeof navigator !== 'undefined';\r\n    this.isMediaDevicesSupported = this.hasNavigator && !!navigator.mediaDevices;\r\n  }\r\n\r\n  /**\r\n   * Gets and registers all cammeras.\r\n   */\r\n  async askForPermission(): Promise<boolean> {\r\n\r\n    if (!this.hasNavigator) {\r\n      console.error('@zxing/ngx-scanner', 'Can\\'t ask permission, navigator is not present.');\r\n      this.setPermission(null);\r\n      return this.hasPermission;\r\n    }\r\n\r\n    if (!this.isMediaDevicesSupported) {\r\n      console.error('@zxing/ngx-scanner', 'Can\\'t get user media, this is not supported.');\r\n      this.setPermission(null);\r\n      return this.hasPermission;\r\n    }\r\n\r\n    let stream: MediaStream;\r\n    let permission: boolean;\r\n\r\n    try {\r\n      // Will try to ask for permission\r\n      stream = await this.getAnyVideoDevice();\r\n      permission = !!stream;\r\n    } catch (err) {\r\n      return this.handlePermissionException(err);\r\n    } finally {\r\n      this.terminateStream(stream);\r\n    }\r\n\r\n    this.setPermission(permission);\r\n\r\n    // Returns the permission\r\n    return permission;\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  getAnyVideoDevice(): Promise<MediaStream> {\r\n    return navigator.mediaDevices.getUserMedia({ video: true });\r\n  }\r\n\r\n  /**\r\n   * Terminates a stream and it's tracks.\r\n   */\r\n  private terminateStream(stream: MediaStream) {\r\n\r\n    if (stream) {\r\n      stream.getTracks().forEach(t => t.stop());\r\n    }\r\n\r\n    stream = undefined;\r\n  }\r\n\r\n  /**\r\n   * Initializes the component without starting the scanner.\r\n   */\r\n  private initAutostartOff(): void {\r\n\r\n    // do not ask for permission when autostart is off\r\n    this.isAutostarting = null;\r\n\r\n    // just update devices information\r\n    this.updateVideoInputDevices();\r\n  }\r\n\r\n  /**\r\n   * Initializes the component and starts the scanner.\r\n   * Permissions are asked to accomplish that.\r\n   */\r\n  private async initAutostartOn(): Promise<void> {\r\n\r\n    this.isAutostarting = true;\r\n\r\n    let hasPermission: boolean;\r\n\r\n    try {\r\n      // Asks for permission before enumerating devices so it can get all the device's info\r\n      hasPermission = await this.askForPermission();\r\n    } catch (e) {\r\n      console.error('Exception occurred while asking for permission:', e);\r\n      return;\r\n    }\r\n\r\n    // from this point, things gonna need permissions\r\n    if (hasPermission) {\r\n      const devices = await this.updateVideoInputDevices();\r\n      this.autostartScanner([...devices]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the given device is the current defined one.\r\n   */\r\n  isCurrentDevice(device: MediaDeviceInfo) {\r\n    return this.device && device && device.deviceId === this.device.deviceId;\r\n  }\r\n\r\n  /**\r\n   * Executed after the view initialization.\r\n   */\r\n  ngAfterViewInit(): void {\r\n\r\n    // makes torch availability information available to user\r\n    this.getCodeReader().isTorchAvailable.subscribe(x => this.torchCompatible.emit(x));\r\n\r\n    if (!this.autostart) {\r\n      console.warn('New feature \\'autostart\\' disabled, be careful. Permissions and devices recovery has to be run manually.');\r\n\r\n      // does the necessary configuration without autostarting\r\n      this.initAutostartOff();\r\n\r\n      return;\r\n    }\r\n\r\n    // configurates the component and starts the scanner\r\n    this.initAutostartOn();\r\n  }\r\n\r\n  /**\r\n   * Executes some actions before destroy the component.\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * Stops old `codeReader` and starts scanning in a new one.\r\n   */\r\n  restart(): void {\r\n\r\n    const prevDevice = this._reset();\r\n\r\n    if (!prevDevice) {\r\n      return;\r\n    }\r\n\r\n    // @note apenas necessario por enquanto causa da Torch\r\n    this._codeReader = undefined;\r\n    this.device = prevDevice;\r\n  }\r\n\r\n  /**\r\n   * Discovers and updates known video input devices.\r\n   */\r\n  async updateVideoInputDevices(): Promise<MediaDeviceInfo[]> {\r\n\r\n    // permissions aren't needed to get devices, but to access them and their info\r\n    const devices = await this.getCodeReader().listVideoInputDevices() || [];\r\n    const hasDevices = devices && devices.length > 0;\r\n\r\n    // stores discovered devices and updates information\r\n    this.hasDevices.next(hasDevices);\r\n    this.camerasFound.next([...devices]);\r\n\r\n    if (!hasDevices) {\r\n      this.camerasNotFound.next();\r\n    }\r\n\r\n    return devices;\r\n  }\r\n\r\n  /**\r\n   * Starts the scanner with the back camera otherwise take the last\r\n   * available device.\r\n   */\r\n  private autostartScanner(devices: MediaDeviceInfo[]) {\r\n\r\n    const matcher = ({ label }) => /back|trás|rear|traseira|environment|ambiente/gi.test(label);\r\n\r\n    // select the rear camera by default, otherwise take the last camera.\r\n    const device = devices.find(matcher) || devices.pop();\r\n\r\n    if (!device) {\r\n      throw new Error('Impossible to autostart, no input devices available.');\r\n    }\r\n\r\n    this.device = device;\r\n    // @note when listening to this change, callback code will sometimes run before the previous line.\r\n    this.deviceChange.emit(device);\r\n\r\n    this.isAutostarting = false;\r\n    this.autostarted.next();\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan success event.\r\n   *\r\n   * @param result the scan result.\r\n   */\r\n  private dispatchScanSuccess(result: Result): void {\r\n    this.scanSuccess.next(result.getText());\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan failure event.\r\n   */\r\n  private dispatchScanFailure(reason?: Exception): void {\r\n    this.scanFailure.next(reason);\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan error event.\r\n   *\r\n   * @param error the error thing.\r\n   */\r\n  private dispatchScanError(error: any): void {\r\n    this.scanError.next(error);\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan event.\r\n   *\r\n   * @param result the scan result.\r\n   */\r\n  private dispatchScanComplete(result: Result): void {\r\n    this.scanComplete.next(result);\r\n  }\r\n\r\n  /**\r\n   * Returns the filtered permission.\r\n   */\r\n  private handlePermissionException(err: DOMException): boolean {\r\n\r\n    // failed to grant permission to video input\r\n    console.error('@zxing/ngx-scanner', 'Error when asking for permission.', err);\r\n\r\n    let permission: boolean;\r\n\r\n    switch (err.name) {\r\n\r\n      // usually caused by not secure origins\r\n      case 'NotSupportedError':\r\n        console.warn('@zxing/ngx-scanner', err.message);\r\n        // could not claim\r\n        permission = null;\r\n        // can't check devices\r\n        this.hasDevices.next(null);\r\n        break;\r\n\r\n      // user denied permission\r\n      case 'NotAllowedError':\r\n        console.warn('@zxing/ngx-scanner', err.message);\r\n        // claimed and denied permission\r\n        permission = false;\r\n        // this means that input devices exists\r\n        this.hasDevices.next(true);\r\n        break;\r\n\r\n      // the device has no attached input devices\r\n      case 'NotFoundError':\r\n        console.warn('@zxing/ngx-scanner', err.message);\r\n        // no permissions claimed\r\n        permission = null;\r\n        // because there was no devices\r\n        this.hasDevices.next(false);\r\n        // tells the listener about the error\r\n        this.camerasNotFound.next(err);\r\n        break;\r\n\r\n      case 'NotReadableError':\r\n        console.warn('@zxing/ngx-scanner', 'Couldn\\'t read the device(s)\\'s stream, it\\'s probably in use by another app.');\r\n        // no permissions claimed\r\n        permission = null;\r\n        // there are devices, which I couldn't use\r\n        this.hasDevices.next(false);\r\n        // tells the listener about the error\r\n        this.camerasNotFound.next(err);\r\n        break;\r\n\r\n      default:\r\n        console.warn('@zxing/ngx-scanner', 'I was not able to define if I have permissions for camera or not.', err);\r\n        // unknown\r\n        permission = null;\r\n        // this.hasDevices.next(undefined;\r\n        break;\r\n\r\n    }\r\n\r\n    this.setPermission(permission);\r\n\r\n    // tells the listener about the error\r\n    this.permissionResponse.error(err);\r\n\r\n    return permission;\r\n  }\r\n\r\n  /**\r\n   * Returns a valid BarcodeFormat or fails.\r\n   */\r\n  private getBarcodeFormatOrFail(format: string | BarcodeFormat): BarcodeFormat {\r\n    return typeof format === 'string'\r\n      ? BarcodeFormat[format.trim().toUpperCase()]\r\n      : format;\r\n  }\r\n\r\n  /**\r\n   * Retorna um code reader, cria um se nenhume existe.\r\n   */\r\n  private getCodeReader(): BrowserMultiFormatContinuousReader {\r\n\r\n    if (!this._codeReader) {\r\n      this._codeReader = new BrowserMultiFormatContinuousReader(this.hints, this.timeBetweenScans);\r\n    }\r\n\r\n    return this._codeReader;\r\n  }\r\n\r\n  /**\r\n   * Starts the continuous scanning for the given device.\r\n   *\r\n   * @param deviceId The deviceId from the device.\r\n   */\r\n  private scanFromDevice(deviceId: string): void {\r\n\r\n    const videoElement = this.previewElemRef.nativeElement;\r\n\r\n    const codeReader = this.getCodeReader();\r\n\r\n    const decodingStream = codeReader.continuousDecodeFromInputVideoDevice(deviceId, videoElement);\r\n\r\n    if (!decodingStream) {\r\n      throw new Error('Undefined decoding stream, aborting.');\r\n    }\r\n\r\n    const next = (x: ResultAndError) => this._onDecodeResult(x.result, x.error);\r\n    const error = (err: any) => this._onDecodeError(err);\r\n    const complete = () => { this.reset(); console.log('completed'); };\r\n\r\n    decodingStream.subscribe(next, error, complete);\r\n  }\r\n\r\n  /**\r\n   * Handles decode errors.\r\n   */\r\n  private _onDecodeError(err: any) {\r\n    this.dispatchScanError(err);\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * Handles decode results.\r\n   */\r\n  private _onDecodeResult(result: Result, error: Exception): void {\r\n\r\n    if (result) {\r\n      this.dispatchScanSuccess(result);\r\n    } else {\r\n      this.dispatchScanFailure(error);\r\n    }\r\n\r\n    this.dispatchScanComplete(result);\r\n  }\r\n\r\n  /**\r\n   * Stops the code reader and returns the previous selected device.\r\n   */\r\n  private _reset(): MediaDeviceInfo {\r\n\r\n    if (!this._codeReader) {\r\n      return;\r\n    }\r\n\r\n    const device = this.device;\r\n    // do not set this.device inside this method, it would create a recursive loop\r\n    this._device = null;\r\n\r\n    this._codeReader.reset();\r\n\r\n    return device;\r\n  }\r\n\r\n  /**\r\n   * Resets the scanner and emits device change.\r\n   */\r\n  public reset(): void {\r\n    this._reset();\r\n    this.deviceChange.emit(null);\r\n  }\r\n\r\n  /**\r\n   * Sets the permission value and emmits the event.\r\n   */\r\n  private setPermission(hasPermission: boolean | null): void {\r\n    this.hasPermission = hasPermission;\r\n    this.permissionResponse.next(hasPermission);\r\n  }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ZXingScannerComponent } from './zxing-scanner.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [ZXingScannerComponent],\r\n  exports: [ZXingScannerComponent],\r\n})\r\nexport class ZXingScannerModule { }\r\n","/*\r\n * Public API Surface of zxing-scanner\r\n */\r\n\r\nexport * from './lib/zxing-scanner.module';\r\nexport * from './lib/zxing-scanner.component';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}