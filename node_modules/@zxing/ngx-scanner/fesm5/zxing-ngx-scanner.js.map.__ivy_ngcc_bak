{"version":3,"file":"zxing-ngx-scanner.js","sources":["ng://@zxing/ngx-scanner/lib/browser-multi-format-continuous-reader.ts","ng://@zxing/ngx-scanner/lib/zxing-scanner.component.ts","ng://@zxing/ngx-scanner/lib/zxing-scanner.module.ts","ng://@zxing/ngx-scanner/public_api.ts","ng://@zxing/ngx-scanner/zxing-ngx-scanner.ts"],"sourcesContent":["/// <reference path=\"./image-capture.d.ts\" />\r\n\r\nimport { BrowserMultiFormatReader, ChecksumException, FormatException, NotFoundException, Result } from '@zxing/library';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { ResultAndError } from './ResultAndError';\r\n\r\n/**\r\n * Based on zxing-typescript BrowserCodeReader\r\n */\r\nexport class BrowserMultiFormatContinuousReader extends BrowserMultiFormatReader {\r\n\r\n  /**\r\n   * Exposes _tochAvailable .\r\n   */\r\n  public get isTorchAvailable(): Observable<boolean> {\r\n    return this._isTorchAvailable.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Says if there's a torch available for the current device.\r\n   */\r\n  private _isTorchAvailable = new BehaviorSubject<boolean>(undefined);\r\n\r\n  /**\r\n   * The device id of the current media device.\r\n   */\r\n  private deviceId: string;\r\n\r\n  /**\r\n   * If there's some scan stream open, it shal be here.\r\n   */\r\n  private scanStream: BehaviorSubject<ResultAndError>;\r\n\r\n  /**\r\n   * Starts the decoding from the current or a new video element.\r\n   *\r\n   * @param callbackFn The callback to be executed after every scan attempt\r\n   * @param deviceId The device's to be used Id\r\n   * @param videoSource A new video element\r\n   */\r\n  public continuousDecodeFromInputVideoDevice(\r\n    deviceId?: string,\r\n    videoSource?: HTMLVideoElement\r\n  ): Observable<ResultAndError> {\r\n\r\n    this.reset();\r\n\r\n    // Keeps the deviceId between scanner resets.\r\n    if (typeof deviceId !== 'undefined') {\r\n      this.deviceId = deviceId;\r\n    }\r\n\r\n    if (typeof navigator === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    const scan$ = new BehaviorSubject<ResultAndError>({});\r\n\r\n    try {\r\n      // this.decodeFromInputVideoDeviceContinuously(deviceId, videoSource, (result, error) => scan$.next({ result, error }));\r\n      this.getStreamForDevice({ deviceId })\r\n        .then(stream => this.attachStreamToVideoAndCheckTorch(stream, videoSource))\r\n        .then(videoElement => this.decodeOnSubject(scan$, videoElement, this.timeBetweenScansMillis));\r\n    } catch (e) {\r\n      scan$.error(e);\r\n    }\r\n\r\n    this._setScanStream(scan$);\r\n\r\n    // @todo Find a way to emit a complete event on the scan stream once it's finished.\r\n\r\n    return scan$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Gets the media stream for certain device.\r\n   * Falls back to any available device if no `deviceId` is defined.\r\n   */\r\n  public async getStreamForDevice({ deviceId }: Partial<MediaDeviceInfo>): Promise<MediaStream> {\r\n    const constraints = this.getUserMediaConstraints(deviceId);\r\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n    return stream;\r\n  }\r\n\r\n  /**\r\n   * Creates media steram constraints for certain `deviceId`.\r\n   * Falls back to any environment available device if no `deviceId` is defined.\r\n   */\r\n  public getUserMediaConstraints(deviceId: string): MediaStreamConstraints {\r\n\r\n    const video = typeof deviceId === 'undefined'\r\n      ? { facingMode: { exact: 'environment' } }\r\n      : { deviceId: { exact: deviceId } };\r\n\r\n    const constraints: MediaStreamConstraints = { video };\r\n\r\n    return constraints;\r\n  }\r\n\r\n  /**\r\n   * Enables and disables the device torch.\r\n   */\r\n  public setTorch(on: boolean): void {\r\n\r\n    if (!this._isTorchAvailable.value) {\r\n      // compatibility not checked yet\r\n      return;\r\n    }\r\n\r\n    const tracks = this.getVideoTracks(this.stream);\r\n\r\n    if (on) {\r\n      this.applyTorchOnTracks(tracks, true);\r\n    } else {\r\n      this.applyTorchOnTracks(tracks, false);\r\n      // @todo check possibility to disable torch without restart\r\n      this.restart();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the torch compatibility state and attachs the stream to the preview element.\r\n   */\r\n  private attachStreamToVideoAndCheckTorch(stream: MediaStream, videoSource: HTMLVideoElement): Promise<HTMLVideoElement> {\r\n    this.updateTorchCompatibility(stream);\r\n    return this.attachStreamToVideo(stream, videoSource);\r\n  }\r\n\r\n  /**\r\n   * Checks if the stream supports torch control.\r\n   *\r\n   * @param stream The media stream used to check.\r\n   */\r\n  private async updateTorchCompatibility(stream: MediaStream): Promise<void> {\r\n\r\n    const tracks = this.getVideoTracks(stream);\r\n\r\n    for (const track of tracks) {\r\n      if (await this.isTorchCompatible(track)) {\r\n        this._isTorchAvailable.next(true);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param stream The video stream where the tracks gonna be extracted from.\r\n   */\r\n  private getVideoTracks(stream: MediaStream) {\r\n    let tracks = [];\r\n    try {\r\n      tracks = stream.getVideoTracks();\r\n    }\r\n    finally {\r\n      return tracks || [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param track The media stream track that will be checked for compatibility.\r\n   */\r\n  private async isTorchCompatible(track: MediaStreamTrack) {\r\n\r\n    let compatible = false;\r\n\r\n    try {\r\n      const imageCapture = new ImageCapture(track);\r\n      const capabilities = await imageCapture.getPhotoCapabilities();\r\n      compatible = !!capabilities['torch'] || ('fillLightMode' in capabilities && capabilities.fillLightMode.length !== 0);\r\n    }\r\n    finally {\r\n      return compatible;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply the torch setting in all received tracks.\r\n   */\r\n  private applyTorchOnTracks(tracks: MediaStreamTrack[], state: boolean) {\r\n    tracks.forEach(track => track.applyConstraints({\r\n      advanced: [<any>{ torch: state, fillLightMode: state ? 'torch' : 'none' }]\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Correctly sets a new scanStream value.\r\n   */\r\n  private _setScanStream(scan$: BehaviorSubject<ResultAndError>): void {\r\n    // cleans old stream\r\n    this._cleanScanStream();\r\n    // sets new stream\r\n    this.scanStream = scan$;\r\n  }\r\n\r\n  /**\r\n   * Cleans any old scan stream value.\r\n   */\r\n  private _cleanScanStream(): void {\r\n\r\n    if (this.scanStream && !this.scanStream.isStopped) {\r\n      this.scanStream.complete();\r\n    }\r\n\r\n    this.scanStream = null;\r\n  }\r\n\r\n  /**\r\n   * Decodes values in a stream with delays between scans.\r\n   *\r\n   * @param scan$ The subject to receive the values.\r\n   * @param videoElement The video element the decode will be applied.\r\n   * @param delay The delay between decode results.\r\n   */\r\n  private decodeOnSubject(scan$: BehaviorSubject<ResultAndError>, videoElement: HTMLVideoElement, delay: number): void {\r\n\r\n    // stops loop\r\n    if (scan$.isStopped) {\r\n      return;\r\n    }\r\n\r\n    let result: Result;\r\n\r\n    try {\r\n      result = this.decode(videoElement);\r\n      scan$.next({ result });\r\n    } catch (error) {\r\n      // stream cannot stop on fails.\r\n      if (\r\n        !error ||\r\n        // scan Failure - found nothing, no error\r\n        error instanceof NotFoundException ||\r\n        // scan Error - found the QR but got error on decoding\r\n        error instanceof ChecksumException ||\r\n        error instanceof FormatException\r\n      ) {\r\n        scan$.next({ error });\r\n      } else {\r\n        scan$.error(error);\r\n      }\r\n    } finally {\r\n      const timeout = !result ? 0 : delay;\r\n      setTimeout(() => this.decodeOnSubject(scan$, videoElement, delay), timeout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restarts the scanner.\r\n   */\r\n  private restart(): Observable<ResultAndError> {\r\n    // reset\r\n    // start\r\n    return this.continuousDecodeFromInputVideoDevice(this.deviceId, this.videoElement);\r\n  }\r\n\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\n\r\nimport {\r\n  ArgumentException,\r\n  BarcodeFormat,\r\n  DecodeHintType,\r\n  Exception,\r\n  Result\r\n} from '@zxing/library';\r\n\r\nimport { BrowserMultiFormatContinuousReader } from './browser-multi-format-continuous-reader';\r\nimport { ResultAndError } from './ResultAndError';\r\n\r\n@Component({\r\n  selector: 'zxing-scanner',\r\n  templateUrl: './zxing-scanner.component.html',\r\n  styleUrls: ['./zxing-scanner.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ZXingScannerComponent implements AfterViewInit, OnDestroy {\r\n\r\n  /**\r\n   * Supported Hints map.\r\n   */\r\n  private _hints: Map<DecodeHintType, any> | null;\r\n\r\n  /**\r\n   * The ZXing code reader.\r\n   */\r\n  private _codeReader: BrowserMultiFormatContinuousReader;\r\n\r\n  /**\r\n   * The device that should be used to scan things.\r\n   */\r\n  private _device: MediaDeviceInfo;\r\n\r\n  /**\r\n   * The device that should be used to scan things.\r\n   */\r\n  private _enabled: boolean;\r\n\r\n  /**\r\n   *\r\n   */\r\n  private _isAutostarting: boolean;\r\n\r\n  /**\r\n   * Has `navigator` access.\r\n   */\r\n  private hasNavigator: boolean;\r\n\r\n  /**\r\n   * Says if some native API is supported.\r\n   */\r\n  private isMediaDevicesSupported: boolean;\r\n\r\n  /**\r\n   * If the user-agent allowed the use of the camera or not.\r\n   */\r\n  private hasPermission: boolean | null;\r\n\r\n  /**\r\n   * Reference to the preview element, should be the `video` tag.\r\n   */\r\n  @ViewChild('preview', { static: true })\r\n  previewElemRef: ElementRef<HTMLVideoElement>;\r\n\r\n  /**\r\n   * Enable or disable autofocus of the camera (might have an impact on performance)\r\n   */\r\n  @Input()\r\n  autofocusEnabled: boolean;\r\n\r\n  /**\r\n   * Modify delay between scans (default is 500ms)\r\n   */\r\n  @Input()\r\n  timeBetweenScans = 500;\r\n\r\n  /**\r\n   * Emits when and if the scanner is autostarted.\r\n   */\r\n  @Output()\r\n  autostarted: EventEmitter<void>;\r\n\r\n  /**\r\n   * True during autostart and false after. It will be null if won't autostart at all.\r\n   */\r\n  @Output()\r\n  autostarting: EventEmitter<boolean | null>;\r\n\r\n  /**\r\n   * If the scanner should autostart with the first available device.\r\n   */\r\n  @Input()\r\n  autostart: boolean;\r\n\r\n  /**\r\n   * How the preview element shoud be fit inside the :host container.\r\n   */\r\n  @Input()\r\n  previewFitMode: 'fill' | 'contain' | 'cover' | 'scale-down' | 'none' = 'cover';\r\n\r\n  /**\r\n   * Emitts events when the torch compatibility is changed.\r\n   */\r\n  @Output()\r\n  torchCompatible: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * Emitts events when a scan is successful performed, will inject the string value of the QR-code to the callback.\r\n   */\r\n  @Output()\r\n  scanSuccess: EventEmitter<string>;\r\n\r\n  /**\r\n   * Emitts events when a scan fails without errors, usefull to know how much scan tries where made.\r\n   */\r\n  @Output()\r\n  scanFailure: EventEmitter<Exception | undefined>;\r\n\r\n  /**\r\n   * Emitts events when a scan throws some error, will inject the error to the callback.\r\n   */\r\n  @Output()\r\n  scanError: EventEmitter<Error>;\r\n\r\n  /**\r\n   * Emitts events when a scan is performed, will inject the Result value of the QR-code scan (if available) to the callback.\r\n   */\r\n  @Output()\r\n  scanComplete: EventEmitter<Result>;\r\n\r\n  /**\r\n   * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\r\n   */\r\n  @Output()\r\n  camerasFound: EventEmitter<MediaDeviceInfo[]>;\r\n\r\n  /**\r\n   * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\r\n   */\r\n  @Output()\r\n  camerasNotFound: EventEmitter<any>;\r\n\r\n  /**\r\n   * Emitts events when the users answers for permission.\r\n   */\r\n  @Output()\r\n  permissionResponse: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * Emitts events when has devices status is update.\r\n   */\r\n  @Output()\r\n  hasDevices: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * Exposes the current code reader, so the user can use it's APIs.\r\n   */\r\n  get codeReader(): BrowserMultiFormatContinuousReader {\r\n    return this._codeReader;\r\n  }\r\n\r\n  /**\r\n   * User device input\r\n   */\r\n  @Input()\r\n  set device(device: MediaDeviceInfo | null) {\r\n\r\n    if (!device && device !== null) {\r\n      throw new ArgumentException('The `device` must be a valid MediaDeviceInfo or null.');\r\n    }\r\n\r\n    if (this.isCurrentDevice(device)) {\r\n      console.warn('Setting the same device is not allowed.');\r\n      return;\r\n    }\r\n\r\n    if (this.isAutostarting) {\r\n      // do not allow setting devices during auto-start, since it will set one and emit it.\r\n      console.warn('Avoid setting a device during auto-start.');\r\n      return;\r\n    }\r\n\r\n    if (!this.hasPermission) {\r\n      console.warn('Permissions not set yet, waiting for them to be set to apply device change.');\r\n      // this.permissionResponse\r\n      //   .pipe(\r\n      //     take(1),\r\n      //     tap(() => console.log(`Permissions set, applying device change${device ? ` (${device.deviceId})` : ''}.`))\r\n      //   )\r\n      //   .subscribe(() => this.device = device);\r\n      // return;\r\n    }\r\n\r\n    // in order to change the device the codeReader gotta be reseted\r\n    this._reset();\r\n\r\n    this._device = device;\r\n\r\n    // if enabled, starts scanning\r\n    if (this._enabled && device !== null) {\r\n      this.scanFromDevice(device.deviceId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emits when the current device is changed.\r\n   */\r\n  @Output()\r\n  deviceChange: EventEmitter<MediaDeviceInfo>;\r\n\r\n  /**\r\n   * User device acessor.\r\n   */\r\n  get device() {\r\n    return this._device;\r\n  }\r\n\r\n  /**\r\n   * Returns all the registered formats.\r\n   */\r\n  get formats(): BarcodeFormat[] {\r\n    return this.hints.get(DecodeHintType.POSSIBLE_FORMATS);\r\n  }\r\n\r\n  /**\r\n   * Registers formats the scanner should support.\r\n   *\r\n   * @param input BarcodeFormat or case-insensitive string array.\r\n   */\r\n  @Input()\r\n  set formats(input: BarcodeFormat[]) {\r\n\r\n    if (typeof input === 'string') {\r\n      throw new Error('Invalid formats, make sure the [formats] input is a binding.');\r\n    }\r\n\r\n    // formats may be set from html template as BarcodeFormat or string array\r\n    const formats = input.map(f => this.getBarcodeFormatOrFail(f));\r\n\r\n    const hints = this.hints;\r\n\r\n    // updates the hints\r\n    hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\r\n\r\n    this.hints = hints;\r\n  }\r\n\r\n  /**\r\n   * Returns all the registered hints.\r\n   */\r\n  get hints() {\r\n    return this._hints;\r\n  }\r\n\r\n  /**\r\n   * Does what it takes to set the hints.\r\n   */\r\n  set hints(hints: Map<DecodeHintType, any>) {\r\n\r\n    this._hints = hints;\r\n\r\n    // @note avoid restarting the code reader when possible\r\n\r\n    // new instance with new hints.\r\n    this.restart();\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  set isAutostarting(state: boolean | null) {\r\n    this._isAutostarting = state;\r\n    this.autostarting.next(state);\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  get isAutostarting(): boolean | null {\r\n    return this._isAutostarting;\r\n  }\r\n\r\n  /**\r\n   * Can turn on/off the device flashlight.\r\n   */\r\n  @Input()\r\n  set torch(on: boolean) {\r\n    this.getCodeReader().setTorch(on);\r\n  }\r\n\r\n  /**\r\n   * Starts and Stops the scanning.\r\n   */\r\n  @Input()\r\n  set enable(enabled: boolean) {\r\n\r\n    this._enabled = Boolean(enabled);\r\n\r\n    if (!this._enabled) {\r\n      this.reset();\r\n    } else if (this.device) {\r\n      this.scanFromDevice(this.device.deviceId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tells if the scanner is enabled or not.\r\n   */\r\n  get enabled(): boolean {\r\n    return this._enabled;\r\n  }\r\n\r\n  /**\r\n   * If is `tryHarder` enabled.\r\n   */\r\n  get tryHarder(): boolean {\r\n    return this.hints.get(DecodeHintType.TRY_HARDER);\r\n  }\r\n\r\n  /**\r\n   * Enable/disable tryHarder hint.\r\n   */\r\n  @Input()\r\n  set tryHarder(enable: boolean) {\r\n\r\n    const hints = this.hints;\r\n\r\n    if (enable) {\r\n      hints.set(DecodeHintType.TRY_HARDER, true);\r\n    } else {\r\n      hints.delete(DecodeHintType.TRY_HARDER);\r\n    }\r\n\r\n    this.hints = hints;\r\n  }\r\n\r\n  /**\r\n   * Constructor to build the object and do some DI.\r\n   */\r\n  constructor() {\r\n    // instance based emitters\r\n    this.autostarted = new EventEmitter();\r\n    this.autostarting = new EventEmitter();\r\n    this.torchCompatible = new EventEmitter();\r\n    this.scanSuccess = new EventEmitter();\r\n    this.scanFailure = new EventEmitter();\r\n    this.scanError = new EventEmitter();\r\n    this.scanComplete = new EventEmitter();\r\n    this.camerasFound = new EventEmitter();\r\n    this.camerasNotFound = new EventEmitter();\r\n    this.permissionResponse = new EventEmitter(true);\r\n    this.hasDevices = new EventEmitter();\r\n    this.deviceChange = new EventEmitter();\r\n\r\n    this._device = null;\r\n    this._enabled = true;\r\n    this._hints = new Map<DecodeHintType, any>();\r\n    this.autofocusEnabled = true;\r\n    this.autostart = true;\r\n    this.formats = [BarcodeFormat.QR_CODE];\r\n\r\n    // computed data\r\n    this.hasNavigator = typeof navigator !== 'undefined';\r\n    this.isMediaDevicesSupported = this.hasNavigator && !!navigator.mediaDevices;\r\n  }\r\n\r\n  /**\r\n   * Gets and registers all cammeras.\r\n   */\r\n  async askForPermission(): Promise<boolean> {\r\n\r\n    if (!this.hasNavigator) {\r\n      console.error('@zxing/ngx-scanner', 'Can\\'t ask permission, navigator is not present.');\r\n      this.setPermission(null);\r\n      return this.hasPermission;\r\n    }\r\n\r\n    if (!this.isMediaDevicesSupported) {\r\n      console.error('@zxing/ngx-scanner', 'Can\\'t get user media, this is not supported.');\r\n      this.setPermission(null);\r\n      return this.hasPermission;\r\n    }\r\n\r\n    let stream: MediaStream;\r\n    let permission: boolean;\r\n\r\n    try {\r\n      // Will try to ask for permission\r\n      stream = await this.getAnyVideoDevice();\r\n      permission = !!stream;\r\n    } catch (err) {\r\n      return this.handlePermissionException(err);\r\n    } finally {\r\n      this.terminateStream(stream);\r\n    }\r\n\r\n    this.setPermission(permission);\r\n\r\n    // Returns the permission\r\n    return permission;\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  getAnyVideoDevice(): Promise<MediaStream> {\r\n    return navigator.mediaDevices.getUserMedia({ video: true });\r\n  }\r\n\r\n  /**\r\n   * Terminates a stream and it's tracks.\r\n   */\r\n  private terminateStream(stream: MediaStream) {\r\n\r\n    if (stream) {\r\n      stream.getTracks().forEach(t => t.stop());\r\n    }\r\n\r\n    stream = undefined;\r\n  }\r\n\r\n  /**\r\n   * Initializes the component without starting the scanner.\r\n   */\r\n  private initAutostartOff(): void {\r\n\r\n    // do not ask for permission when autostart is off\r\n    this.isAutostarting = null;\r\n\r\n    // just update devices information\r\n    this.updateVideoInputDevices();\r\n  }\r\n\r\n  /**\r\n   * Initializes the component and starts the scanner.\r\n   * Permissions are asked to accomplish that.\r\n   */\r\n  private async initAutostartOn(): Promise<void> {\r\n\r\n    this.isAutostarting = true;\r\n\r\n    let hasPermission: boolean;\r\n\r\n    try {\r\n      // Asks for permission before enumerating devices so it can get all the device's info\r\n      hasPermission = await this.askForPermission();\r\n    } catch (e) {\r\n      console.error('Exception occurred while asking for permission:', e);\r\n      return;\r\n    }\r\n\r\n    // from this point, things gonna need permissions\r\n    if (hasPermission) {\r\n      const devices = await this.updateVideoInputDevices();\r\n      this.autostartScanner([...devices]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the given device is the current defined one.\r\n   */\r\n  isCurrentDevice(device: MediaDeviceInfo) {\r\n    return this.device && device && device.deviceId === this.device.deviceId;\r\n  }\r\n\r\n  /**\r\n   * Executed after the view initialization.\r\n   */\r\n  ngAfterViewInit(): void {\r\n\r\n    // makes torch availability information available to user\r\n    this.getCodeReader().isTorchAvailable.subscribe(x => this.torchCompatible.emit(x));\r\n\r\n    if (!this.autostart) {\r\n      console.warn('New feature \\'autostart\\' disabled, be careful. Permissions and devices recovery has to be run manually.');\r\n\r\n      // does the necessary configuration without autostarting\r\n      this.initAutostartOff();\r\n\r\n      return;\r\n    }\r\n\r\n    // configurates the component and starts the scanner\r\n    this.initAutostartOn();\r\n  }\r\n\r\n  /**\r\n   * Executes some actions before destroy the component.\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * Stops old `codeReader` and starts scanning in a new one.\r\n   */\r\n  restart(): void {\r\n\r\n    const prevDevice = this._reset();\r\n\r\n    if (!prevDevice) {\r\n      return;\r\n    }\r\n\r\n    // @note apenas necessario por enquanto causa da Torch\r\n    this._codeReader = undefined;\r\n    this.device = prevDevice;\r\n  }\r\n\r\n  /**\r\n   * Discovers and updates known video input devices.\r\n   */\r\n  async updateVideoInputDevices(): Promise<MediaDeviceInfo[]> {\r\n\r\n    // permissions aren't needed to get devices, but to access them and their info\r\n    const devices = await this.getCodeReader().listVideoInputDevices() || [];\r\n    const hasDevices = devices && devices.length > 0;\r\n\r\n    // stores discovered devices and updates information\r\n    this.hasDevices.next(hasDevices);\r\n    this.camerasFound.next([...devices]);\r\n\r\n    if (!hasDevices) {\r\n      this.camerasNotFound.next();\r\n    }\r\n\r\n    return devices;\r\n  }\r\n\r\n  /**\r\n   * Starts the scanner with the back camera otherwise take the last\r\n   * available device.\r\n   */\r\n  private autostartScanner(devices: MediaDeviceInfo[]) {\r\n\r\n    const matcher = ({ label }) => /back|trás|rear|traseira|environment|ambiente/gi.test(label);\r\n\r\n    // select the rear camera by default, otherwise take the last camera.\r\n    const device = devices.find(matcher) || devices.pop();\r\n\r\n    if (!device) {\r\n      throw new Error('Impossible to autostart, no input devices available.');\r\n    }\r\n\r\n    this.device = device;\r\n    // @note when listening to this change, callback code will sometimes run before the previous line.\r\n    this.deviceChange.emit(device);\r\n\r\n    this.isAutostarting = false;\r\n    this.autostarted.next();\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan success event.\r\n   *\r\n   * @param result the scan result.\r\n   */\r\n  private dispatchScanSuccess(result: Result): void {\r\n    this.scanSuccess.next(result.getText());\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan failure event.\r\n   */\r\n  private dispatchScanFailure(reason?: Exception): void {\r\n    this.scanFailure.next(reason);\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan error event.\r\n   *\r\n   * @param error the error thing.\r\n   */\r\n  private dispatchScanError(error: any): void {\r\n    this.scanError.next(error);\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan event.\r\n   *\r\n   * @param result the scan result.\r\n   */\r\n  private dispatchScanComplete(result: Result): void {\r\n    this.scanComplete.next(result);\r\n  }\r\n\r\n  /**\r\n   * Returns the filtered permission.\r\n   */\r\n  private handlePermissionException(err: DOMException): boolean {\r\n\r\n    // failed to grant permission to video input\r\n    console.error('@zxing/ngx-scanner', 'Error when asking for permission.', err);\r\n\r\n    let permission: boolean;\r\n\r\n    switch (err.name) {\r\n\r\n      // usually caused by not secure origins\r\n      case 'NotSupportedError':\r\n        console.warn('@zxing/ngx-scanner', err.message);\r\n        // could not claim\r\n        permission = null;\r\n        // can't check devices\r\n        this.hasDevices.next(null);\r\n        break;\r\n\r\n      // user denied permission\r\n      case 'NotAllowedError':\r\n        console.warn('@zxing/ngx-scanner', err.message);\r\n        // claimed and denied permission\r\n        permission = false;\r\n        // this means that input devices exists\r\n        this.hasDevices.next(true);\r\n        break;\r\n\r\n      // the device has no attached input devices\r\n      case 'NotFoundError':\r\n        console.warn('@zxing/ngx-scanner', err.message);\r\n        // no permissions claimed\r\n        permission = null;\r\n        // because there was no devices\r\n        this.hasDevices.next(false);\r\n        // tells the listener about the error\r\n        this.camerasNotFound.next(err);\r\n        break;\r\n\r\n      case 'NotReadableError':\r\n        console.warn('@zxing/ngx-scanner', 'Couldn\\'t read the device(s)\\'s stream, it\\'s probably in use by another app.');\r\n        // no permissions claimed\r\n        permission = null;\r\n        // there are devices, which I couldn't use\r\n        this.hasDevices.next(false);\r\n        // tells the listener about the error\r\n        this.camerasNotFound.next(err);\r\n        break;\r\n\r\n      default:\r\n        console.warn('@zxing/ngx-scanner', 'I was not able to define if I have permissions for camera or not.', err);\r\n        // unknown\r\n        permission = null;\r\n        // this.hasDevices.next(undefined;\r\n        break;\r\n\r\n    }\r\n\r\n    this.setPermission(permission);\r\n\r\n    // tells the listener about the error\r\n    this.permissionResponse.error(err);\r\n\r\n    return permission;\r\n  }\r\n\r\n  /**\r\n   * Returns a valid BarcodeFormat or fails.\r\n   */\r\n  private getBarcodeFormatOrFail(format: string | BarcodeFormat): BarcodeFormat {\r\n    return typeof format === 'string'\r\n      ? BarcodeFormat[format.trim().toUpperCase()]\r\n      : format;\r\n  }\r\n\r\n  /**\r\n   * Retorna um code reader, cria um se nenhume existe.\r\n   */\r\n  private getCodeReader(): BrowserMultiFormatContinuousReader {\r\n\r\n    if (!this._codeReader) {\r\n      this._codeReader = new BrowserMultiFormatContinuousReader(this.hints, this.timeBetweenScans);\r\n    }\r\n\r\n    return this._codeReader;\r\n  }\r\n\r\n  /**\r\n   * Starts the continuous scanning for the given device.\r\n   *\r\n   * @param deviceId The deviceId from the device.\r\n   */\r\n  private scanFromDevice(deviceId: string): void {\r\n\r\n    const videoElement = this.previewElemRef.nativeElement;\r\n\r\n    const codeReader = this.getCodeReader();\r\n\r\n    const decodingStream = codeReader.continuousDecodeFromInputVideoDevice(deviceId, videoElement);\r\n\r\n    if (!decodingStream) {\r\n      throw new Error('Undefined decoding stream, aborting.');\r\n    }\r\n\r\n    const next = (x: ResultAndError) => this._onDecodeResult(x.result, x.error);\r\n    const error = (err: any) => this._onDecodeError(err);\r\n    const complete = () => { this.reset(); console.log('completed'); };\r\n\r\n    decodingStream.subscribe(next, error, complete);\r\n  }\r\n\r\n  /**\r\n   * Handles decode errors.\r\n   */\r\n  private _onDecodeError(err: any) {\r\n    this.dispatchScanError(err);\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * Handles decode results.\r\n   */\r\n  private _onDecodeResult(result: Result, error: Exception): void {\r\n\r\n    if (result) {\r\n      this.dispatchScanSuccess(result);\r\n    } else {\r\n      this.dispatchScanFailure(error);\r\n    }\r\n\r\n    this.dispatchScanComplete(result);\r\n  }\r\n\r\n  /**\r\n   * Stops the code reader and returns the previous selected device.\r\n   */\r\n  private _reset(): MediaDeviceInfo {\r\n\r\n    if (!this._codeReader) {\r\n      return;\r\n    }\r\n\r\n    const device = this.device;\r\n    // do not set this.device inside this method, it would create a recursive loop\r\n    this._device = null;\r\n\r\n    this._codeReader.reset();\r\n\r\n    return device;\r\n  }\r\n\r\n  /**\r\n   * Resets the scanner and emits device change.\r\n   */\r\n  public reset(): void {\r\n    this._reset();\r\n    this.deviceChange.emit(null);\r\n  }\r\n\r\n  /**\r\n   * Sets the permission value and emmits the event.\r\n   */\r\n  private setPermission(hasPermission: boolean | null): void {\r\n    this.hasPermission = hasPermission;\r\n    this.permissionResponse.next(hasPermission);\r\n  }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ZXingScannerComponent } from './zxing-scanner.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [ZXingScannerComponent],\r\n  exports: [ZXingScannerComponent],\r\n})\r\nexport class ZXingScannerModule { }\r\n","/*\r\n * Public API Surface of zxing-scanner\r\n */\r\n\r\nexport * from './lib/zxing-scanner.module';\r\nexport * from './lib/zxing-scanner.component';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}